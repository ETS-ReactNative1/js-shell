# TODO: Use these strictly in development (extend from production config)

# JS Shell Docker Compose Development Configuration

# TODO: Autorestart all environments in production

version: '3.1'

networks:
  # Establish base network to resolve container hostnames (esp. w/ Nginx)
  # @see https://github.com/docker/compose/issues/3412#issuecomment-472323332
  shell-core-service-network:

services:
  # Creates a self-signed SSL proxy for local development
  # This permits access to media devices (e.g. microphone / camera) during development
  # 
  # This is not intended to run on a production web server
  #
  # TODO: Possibly bugfix; not able to use custom port / Docker network alias from dev_proxy
  dev_proxy:
    # build: https://github.com/zenOSmosis/docker-dev-ssl-proxy.git
    build: ./docker_modules/dev-ssl-proxy
    depends_on:
      - backend
    networks:
      - shell-core-service-network
    volumes:
      - ./docker_modules/dev-ssl-proxy:/app # Only during development
    environment:
      - PROXY_ADDRESS=http://backend:3001 # Important, don't use quotations here, or it may break the template
    ports:
      - 443:443

  backend:
    build: ./backend
    volumes:
      # - ./backend:/shell/backend # Only during development
      - /tmp:/tmp # Only during development
      - ./:/shell # Only during development
    environment:
      - NODE_ENV=development
      - TERM=xterm # Enables interactive CLI environments
    networks:
      - shell-core-service-network
    links:
      - frontend
    command: ["npm", "run", "start"]

    # Only during development or special deployments
    # Note: Note: These options are ignored when deploying a stack in swarm mode with a (version 3) Compose file.
    # @see https://docs.docker.com/compose/compose-file/
    cap_add:
      - SYS_ADMIN # Only during development or special deployments
      - NET_ADMIN # Only during development or special deployments
  
    ports:
      - 3001:3001

  # Note: No direct network access to frontend; proxied through backend
  frontend:
    build: ./frontend
    volumes:
      # Backend is mapped w/ frontend because of shared object in utils/bind
      # jh: Not yet sure how this will work in production environment
      # - ./frontend:/shell/frontend # Only during development
      # - ./backend:/shell/backend # Only during development
      # - ./cli:/shell/cli # Only during development
      - ./:/shell # Only during development
    environment:
      - NODE_ENV=development
      # - HTTPS=true
    networks:
      - shell-core-service-network
    command: ["npm", "run", "start"]
    # ports:
    #  - 3000:3000

  searx:
    build: ./docker_modules/searx
    networks:
      - shell-core-service-network
    ports:
      - 3020:8080 # TODO: Close off outside port unless necessary
   
  # coturn:
  #  build: ./docker_modules/docker-coturn
  #  networks:
  #   - shell-core-service-network
  #  volumes:
  #    - ./docker_modules/docker-coturn:/app # Only during development
  #  ports:
  #    - 3478:3478
  #    - 3478:3478/udp
  #    - 65435-65535:65435-65535/udp

  # Prototype STT socket w/ Socket.io interface
  # stt-socket:
  #  build: ./docker_modules/stt-socket
  #  networks:
  #    - shell-core-service-network
  #  volumes:
  #    - ./docker_modules/stt-socket:/app # Only during development
  #    - /tmp/stt-socket:/tmp # Only during development
  #   ports:
  #    - 8888:8888