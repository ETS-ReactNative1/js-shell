# TODO: Use these strictly in development (extend from production config)

# JS Shell Docker Compose Development Configuration

# TODO: Autorestart all environments in production

version: '3.3'

networks:
  # Establish base network to resolve container hostnames (esp. w/ Nginx)
  # @see https://github.com/docker/compose/issues/3412#issuecomment-472323332
  shell-core-service-network:

services:
  # Creates a self-signed SSL proxy for local development
  # This permits access to media devices (e.g. microphone / camera) during development
  # 
  # This is not intended to run on a production web server
  #
  # TODO: Possibly bugfix; not able to use custom port / Docker network alias from dev_proxy
  dev_proxy:
    # build: https://github.com/zenOSmosis/docker-dev-ssl-proxy.git
    build: ./docker_modules/dev-ssl-proxy
    depends_on:
      - backend
    networks:
      - shell-core-service-network
    volumes:
      - ./docker_modules/dev-ssl-proxy:/app # Only during development
    environment:
      PROXY_ADDRESS: http://backend:3001 # Important, don't use quotations here, or it may break the template
    ports:
      - 80:80
      - 443:443

  backend:
    build: ./backend
    depends_on:
      - redis
      - mongo
    volumes:
      # - ./backend:/shell/backend # Only during development
      - /tmp:/tmp # Only during development
      - ./:/shell # Only during development
    environment:
      NODE_ENV: development
      TERM: xterm # Enables interactive CLI environments
      BACKEND_REDIS_HOST: redis # TODO: Rename to REDIS_HOSTNAME
      BACKEND_REDIS_PORT: 6379  # TODO: Rename to REDIS_PORT
      MONGO_HOSTNAME: mongo
      MONGO_PORT: 27017
      MONGO_SHELL_DB_NAME: dev_shell
      MONGO_SHELL_USERNAME: shellusername
      MONGO_SHELL_PASSWORD: shellpassword
    user: ${UGID}
    command: ["npm", "run", "start:dev"]
    cap_add:
      - SYS_ADMIN # Only during development or special deployments
      - NET_ADMIN # Only during development or special deployments
    networks:
      - shell-core-service-network
    # Only during development or special deployments
    # Note: Note: These options are ignored when deploying a stack in swarm mode with a (version 3) Compose file.
    # @see https://docs.docker.com/compose/compose-file/
    expose:
      - 3001
  
  # @see https://codewithhugo.com/setting-up-express-and-redis-with-docker-compose/
  redis:
    image: redis
    networks:
      - shell-core-service-network
    expose:
      - 6379
  
  mongo:
    image: mongo
    restart: always
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: example
      MONGO_SHELL_DB_NAME: dev_shell
      MONGO_SHELL_USERNAME: shellusername
      MONGO_SHELL_PASSWORD: shellpassword
    volumes:
      - ./scripts/mongo.init:/docker-entrypoint-initdb.d
    networks:
      - shell-core-service-network
    expose:
      - 27017

  mongo-express:
    image: mongo-express
    restart: always
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: root
      ME_CONFIG_MONGODB_ADMINPASSWORD: example
      ME_CONFIG_SITE_BASEURL: /mongo-express
    networks:
      - shell-core-service-network
    expose:
      - 8081

  searx:
    build: ./docker_modules/searx
    networks:
      - shell-core-service-network
    expose:
      - 8080

  # Note: No direct network access to frontend; proxied through backend
  frontend:
    build: ./frontend
    depends_on:
      - backend
    volumes:
      # Backend is mapped w/ frontend because of shared object in utils/bind
      # jh: Not yet sure how this will work in production environment
      # - ./frontend:/shell/frontend # Only during development
      # - ./backend:/shell/backend # Only during development
      # - ./cli:/shell/cli # Only during development
      - ./:/shell # Only during development
    environment:
      NODE_ENV: development
      REACT_APP_PROJECT_NAME: Shell Desktop
      # - HTTPS=true
    networks:
      - shell-core-service-network
    command: ["npm", "run", "start"]
    expose:
      - 3000
    user: ${UGID}
   
  # coturn:
  #  build: ./docker_modules/docker-coturn
  #  networks:
  #   - shell-core-service-network
  #  volumes:
  #    - ./docker_modules/docker-coturn:/app # Only during development
  #  ports:
  #    - 3478:3478
  #    - 3478:3478/udp
  #    - 65435-65535:65435-65535/udp

  # Prototype STT socket w/ Socket.io interface
  # stt-socket: # TODO: Rename to stt_socket (w/ underscore) for consistency 
  #  build: ./docker_modules/docker-stt-socket
  #  networks:
  #    - shell-core-service-network
  #  expose:
  #    - 80
  #  volumes:
  #    - ./docker_modules/docker-stt-socket:/app # Only during development
  #    - /tmp/stt-socket:/tmp # Only during development