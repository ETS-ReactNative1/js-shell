// Native WebWorker ClientWorkerProcess bootstrapper

// TODO: Re-import from ClientWorkerProcess

importScripts('https://cdnjs.cloudflare.com/ajax/libs/EventEmitter/5.2.6/EventEmitter.js');

if (typeof EventEmitter === 'undefined') {
  throw new Error('Could not obtain EventEmitter');
}

class WorkerPipe extends EventEmitter {
  write(data) {
    return this.emit('data', data);
  }
}

class ClientWorkerRemoteProcess extends EventEmitter {
  constructor() {
    super();

    this._inboundMessagePipeName = null;

    // Obtained from outer process serializer
    this._pid = %CONTROLLER_PID%;

    this._initDataPipes();

    const worker = this;

    self.addEventListener('message', function messageListener (msg) {
      let isControlMsg = false;

      console.log('received message', msg);
  
      const { data } = msg;
  
      const routedPipeNames = [
        'stdin',
        'stdout',
        'stderr'
      ];
  
      for (let i = 0; i < routedPipeNames.length; i++) {
        const testName = routedPipeNames[i];
        const testIdx = data.indexOf('use-pipe:' + testName);
  
        /*
        console.log({
          testName,
          testIdx,
          data
        });
        */
  
        if (testIdx === 0) {
          isControlMsg = true;
          console.debug('Changing inbound message pipe name to:', testName);
          this._inboundMessagePipeName = testName;
        }
      }
  
      if (!isControlMsg && this._inboundMessagePipeName.length) {
        // console.debug('TODO: Pass to pipe', this._inboundMessagePipeName, data);
  
        const writePipe = worker[worker._inboundMessagePipeName];
  
        console.debug({ writePipe, class: worker, pipeName: worker._inboundMessagePipeName });
  
        worker[worker._inboundMessagePipeName].emit('data', data);
      }
    });
  }

  _initDataPipes() {
    this.stdin = new WorkerPipe(this);
    this.stdout = new WorkerPipe(this);
    this.stderr = new WorkerPipe(this);
  }

  postMessage(message) {
    nativeWorker.postMessage(message);
  }

  getPID() {
    return this._pid;
  }

  getClassName() {
    return '${`${this.getClassName()} => $/{this.constructor.name/}`}';
  }

  setName(name) {
    console.warn('TODO: Set name in parent process', name);
  }

  kill() {
    console.warn('TODO: Kill in parent process');
  }
}

const remoteProcess = new ClientWorkerRemoteProcess();

console.debug('Initialized ClientWorkerRemoteProcess', {
  remoteProcess,
  className: remoteProcess.getClassName()
});

const exec = %CMD%;

// Execute w/ remoteProcess
exec(remoteProcess);